// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    
    Not(in=instruction[15], out=ainstruction); //A instruction is if bit 15 = 0. We NOT it meaning if ainstruction = 1 thenit is an a instruction
    Not(in=ainstruction, out=cinstruction); //C instruction if bit 15 of instruction is equal to 1

    
    And(a=cinstruction, b=instruction[5], out=alutoa);
    Mux16(a=instruction, b=outtM, sel=alutoa, out=outmux1);  // takes the output of the ALU if it is a c instruction or load instruction to A if A instruction

    Or(a=ainstruction, b=alutoa, out=loada); //sends a load bit to A register if either instructions true
    ARegister(in=outmux1, load=loada, out=outa); //value of ALU loaded or 14 bit instruction
   
    Mux16(a=outa, b=inM, sel=instruction[12], out=AMout); //selects between A or M depending on the 12th bit of the instruction value

    And(a=cinstruction, b=instruction[4], out=loadd); //if it is a c instruction and bit 4 of instruction indication D register are 1 then load ALU out into D
    DRegister(in=outtM, load=loadd, out=dout); //loading into D

    ALU(x=dout, y=AMout, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outtM, zr=zr, ng=ng); //alu calculates using various bits of c instruction that represent a function

    Or16(a=false, b=outtM, out=outM);
    Or16(a=false, b=outa, out[0..14]=addressM); //if Ais outputting it is due to an A instruction and there for should be passed on as address out to ram
    And(a=cinstruction, b=instruction[3], out=writeM); // if the destination bit for RAM is 1 then write to M
    
    Not(in=ng,out=pos); //not negative 
	Not(in=zr,out=nzr); //not zero
	And(a=instruction[15],b=instruction[0],out=jgt);
	And(a=pos,b=nzr,out=posnzr); //not neg and not zero means it must be positive
	And(a=jgt,b=posnzr,out=ld1); // positive and jump if greater than zero have been actioned then send 1 to pc

	And(a=instruction[15],b=instruction[1],out=jeq);
	And(a=jeq,b=zr,out=ld2); // equal to zero has been recieved in the c instruction and it is equal to zero then jump

	And(a=instruction[15],b=instruction[2],out=jlt);
	And(a=jlt,b=ng,out=ld3); // less than zero jump recieved in c instruction and output is less than zero, send jump to pc

	Or(a=ld1,b=ld2,out=ldt); //OR function meaning if any jumps have been requested the output of ld = 1 else it increments
	Or(a=ld3,b=ldt,out=ld); 

	PC(in=outa,load=ld,inc=true,reset=reset,out[0..14]=pc); // pc handles the jump commands, resets and increments



}